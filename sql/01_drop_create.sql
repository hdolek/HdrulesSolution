
-- ###############################################################
-- HDRULES - Oracle DDL (DROP then CREATE)
-- All objects prefixed with HDRULES_
-- Booleans are NUMBER(1) with 0/1 values
-- ###############################################################

-- ======= DROPS (ignore errors if objects do not exist) ========
BEGIN
  FOR t IN (SELECT table_name FROM user_tables WHERE table_name LIKE 'HDRULES_%') LOOP
    EXECUTE IMMEDIATE 'DROP TABLE ' || t.table_name || ' CASCADE CONSTRAINTS PURGE';
  END LOOP;
  FOR s IN (SELECT sequence_name FROM user_sequences WHERE sequence_name LIKE 'HDRULES_%') LOOP
    EXECUTE IMMEDIATE 'DROP SEQUENCE ' || s.sequence_name;
  END LOOP;
EXCEPTION WHEN OTHERS THEN NULL;
END;
/
-- ==================== SEQUENCES ================================
CREATE SEQUENCE HDRULES_SEQ_RULE_GROUP_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_RULE_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_INPUT_PARAM_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_OUTPUT_COL_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_OUTPUT_ATTR_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_CONDITION_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_COND_SET_VAL_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_OUTPUT_ROW_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_OUTPUT_CELL_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_API_ID START WITH 1 NOCACHE NOCYCLE;
CREATE SEQUENCE HDRULES_SEQ_NRULES_ID START WITH 1 NOCACHE NOCYCLE;

-- ==================== TABLES ==================================
CREATE TABLE HDRULES_RULE_GROUP (
  RULE_GROUP_ID    NUMBER         PRIMARY KEY,
  GROUP_CODE       VARCHAR2(50)   NOT NULL UNIQUE,
  GROUP_NAME       VARCHAR2(200)  NOT NULL,
  DESCRIPTION      VARCHAR2(1000),
  VERSION_NO       NUMBER(10)     DEFAULT 1 NOT NULL,
  IS_ACTIVE        NUMBER(1)      DEFAULT 1 NOT NULL,
  VALID_FROM       DATE           DEFAULT SYSDATE NOT NULL,
  VALID_TO         DATE,
  CACHE_STRATEGY   VARCHAR2(20)   DEFAULT 'MEMORY' CHECK (CACHE_STRATEGY IN ('MEMORY','REDIS','NONE')),
  CACHE_TTL_SEC    NUMBER(10)     DEFAULT 300,
  CREATED_AT       DATE           DEFAULT SYSDATE,
  UPDATED_AT       DATE
);

CREATE TABLE HDRULES_RULE (
  RULE_ID        NUMBER        PRIMARY KEY,
  RULE_GROUP_ID  NUMBER        NOT NULL REFERENCES HDRULES_RULE_GROUP(RULE_GROUP_ID),
  RULE_CODE      VARCHAR2(50)  NOT NULL,
  RULE_NAME      VARCHAR2(200) NOT NULL,
  PRIORITY       NUMBER(10)    DEFAULT 0 NOT NULL,
  VERSION_NO     NUMBER(10)    DEFAULT 1 NOT NULL,
  IS_ACTIVE      NUMBER(1)     DEFAULT 1 NOT NULL,
  VALID_FROM     DATE          DEFAULT SYSDATE NOT NULL,
  VALID_TO       DATE,
  NOTES          VARCHAR2(1000),
  CONSTRAINT UK_HDRULES_RULE UNIQUE (RULE_GROUP_ID, RULE_CODE, VERSION_NO)
);

CREATE TABLE HDRULES_INPUT_PARAM_DEF (
  INPUT_PARAM_ID  NUMBER         PRIMARY KEY,
  RULE_GROUP_ID   NUMBER         REFERENCES HDRULES_RULE_GROUP(RULE_GROUP_ID),
  PARAM_CODE      VARCHAR2(100)  NOT NULL,
  DISPLAY_NAME    VARCHAR2(200),
  DATA_TYPE       VARCHAR2(30)   NOT NULL CHECK (DATA_TYPE IN ('STRING','NUMBER','DATE','BOOLEAN','JSON')),
  JSON_PATH       VARCHAR2(400), -- e.g. $.Data.POLICE_ANA_BILGILER.POLICE_ID
  DESCRIPTION     VARCHAR2(1000),
  IS_REQUIRED     NUMBER(1)      DEFAULT 0,
  CONSTRAINT UK_HDRULES_INPARAM UNIQUE (RULE_GROUP_ID, PARAM_CODE)
);

CREATE TABLE HDRULES_OUTPUT_COL_DEF (
  OUTPUT_COL_ID  NUMBER         PRIMARY KEY,
  RULE_GROUP_ID  NUMBER         NOT NULL REFERENCES HDRULES_RULE_GROUP(RULE_GROUP_ID),
  COL_CODE       VARCHAR2(100)  NOT NULL,
  DISPLAY_NAME   VARCHAR2(200),
  DATA_TYPE      VARCHAR2(30)   NOT NULL CHECK (DATA_TYPE IN ('STRING','NUMBER','DATE','BOOLEAN','JSON')),
  DESCRIPTION    VARCHAR2(1000),
  IS_REQUIRED    NUMBER(1)      DEFAULT 0,
  CONSTRAINT UK_HDRULES_OUTCOL UNIQUE (RULE_GROUP_ID, COL_CODE)
);

CREATE TABLE HDRULES_OUTPUT_COL_ATTR_DEF (
  OUTPUT_ATTR_ID NUMBER         PRIMARY KEY,
  OUTPUT_COL_ID  NUMBER         NOT NULL REFERENCES HDRULES_OUTPUT_COL_DEF(OUTPUT_COL_ID),
  ATTR_CODE      VARCHAR2(100)  NOT NULL,
  ATTR_VALUE     VARCHAR2(400),
  CONSTRAINT UK_HDRULES_OUTCOLATTR UNIQUE (OUTPUT_COL_ID, ATTR_CODE)
);

CREATE TABLE HDRULES_CONDITION (
  CONDITION_ID      NUMBER        PRIMARY KEY,
  RULE_ID           NUMBER        NOT NULL REFERENCES HDRULES_RULE(RULE_ID),
  ORDINAL           NUMBER(10)    DEFAULT 0 NOT NULL,
  LEFT_PARAM_CODE   VARCHAR2(100),      -- e.g. ARAC_MARKA or JSON param code
  LEFT_JSON_PATH    VARCHAR2(400),      -- e.g. $.Data.POLICE_ANA_BILGILER.POLICE_ID
  LEFT_TRANSFORMS   VARCHAR2(200),      -- e.g. UPPER|SUBSTR(1,2)
  OPERATOR          VARCHAR2(20)   NOT NULL,  -- EQ, NE, GT, GE, LT, LE, BETWEEN, IN, NOT_IN, LIKE, ILIKE, STARTSWITH, ENDSWITH, REGEX, EXISTS, EMPTY, CONTAINS
  VALUE_TYPE        VARCHAR2(20)   NOT NULL CHECK (VALUE_TYPE IN ('SCALAR','RANGE','SET','WILDCARD','JSONPATH')),
  VALUE_TEXT        VARCHAR2(2000),     -- for SCALAR or JSONPATH or WILDCARD(*)
  VALUE_TO_TEXT     VARCHAR2(2000),     -- for RANGE upper
  CASE_SENSITIVE    NUMBER(1)      DEFAULT 0,
  NEGATE            NUMBER(1)      DEFAULT 0
);

CREATE TABLE HDRULES_COND_SET_VALUE (
  COND_SET_VAL_ID  NUMBER        PRIMARY KEY,
  CONDITION_ID     NUMBER        NOT NULL REFERENCES HDRULES_CONDITION(CONDITION_ID) ON DELETE CASCADE,
  VALUE_TEXT       VARCHAR2(400) NOT NULL
);

CREATE TABLE HDRULES_RULE_OUTPUT_ROW (
  OUTPUT_ROW_ID  NUMBER         PRIMARY KEY,
  RULE_ID        NUMBER         NOT NULL REFERENCES HDRULES_RULE(RULE_ID) ON DELETE CASCADE,
  ROW_NO         NUMBER(10)     NOT NULL,
  IS_DEFAULT     NUMBER(1)      DEFAULT 0,
  VALID_FROM     DATE           DEFAULT SYSDATE NOT NULL,
  VALID_TO       DATE
);

CREATE TABLE HDRULES_RULE_OUTPUT_CELL (
  OUTPUT_CELL_ID   NUMBER         PRIMARY KEY,
  OUTPUT_ROW_ID    NUMBER         NOT NULL REFERENCES HDRULES_RULE_OUTPUT_ROW(OUTPUT_ROW_ID) ON DELETE CASCADE,
  OUTPUT_COL_ID    NUMBER         NOT NULL REFERENCES HDRULES_OUTPUT_COL_DEF(OUTPUT_COL_ID),
  SOURCE_TYPE      VARCHAR2(20)   NOT NULL CHECK (SOURCE_TYPE IN ('CONST','INPUT','JSON','API','NRULES')),
  CONST_VALUE      VARCHAR2(2000),
  JSON_PATH        VARCHAR2(400),    -- for INPUT/JSON source
  API_CODE         VARCHAR2(100),    -- when SOURCE_TYPE=API
  API_MAP_PATH     VARCHAR2(400),    -- JSONPath inside API response
  NRULES_CODE      VARCHAR2(100),    -- when SOURCE_TYPE=NRULES
  TRANSFORM_CHAIN  VARCHAR2(400),
  NOTES            VARCHAR2(400)
);

CREATE TABLE HDRULES_RULE_OUTPUT_CELL_ATTR (
  OUTPUT_CELL_ID  NUMBER NOT NULL REFERENCES HDRULES_RULE_OUTPUT_CELL(OUTPUT_CELL_ID) ON DELETE CASCADE,
  ATTR_CODE       VARCHAR2(100) NOT NULL,
  ATTR_VALUE      VARCHAR2(400),
  CONSTRAINT PK_HDRULES_CELL_ATTR PRIMARY KEY (OUTPUT_CELL_ID, ATTR_CODE)
);

CREATE TABLE HDRULES_API_DEF (
  API_ID       NUMBER        PRIMARY KEY,
  API_CODE     VARCHAR2(100) NOT NULL UNIQUE,
  NAME         VARCHAR2(200) NOT NULL,
  METHOD       VARCHAR2(10)  NOT NULL,
  URL          VARCHAR2(500) NOT NULL,
  HEADERS      CLOB,
  BODY_TEMPLATE CLOB,
  TIMEOUT_SEC  NUMBER(10)    DEFAULT 10,
  DESCRIPTION  VARCHAR2(1000)
);

CREATE TABLE HDRULES_RULE_API_BINDING (
  RULE_ID     NUMBER        NOT NULL REFERENCES HDRULES_RULE(RULE_ID) ON DELETE CASCADE,
  API_ID      NUMBER        NOT NULL REFERENCES HDRULES_API_DEF(API_ID),
  WHEN_TO_CALL VARCHAR2(20) NOT NULL CHECK (WHEN_TO_CALL IN ('ON_MATCH','ALWAYS','PRE_EVAL','POST_EVAL')),
  CONSTRAINT PK_HDRULES_RULE_API PRIMARY KEY (RULE_ID, API_ID, WHEN_TO_CALL)
);

CREATE TABLE HDRULES_NRULES_DEF (
  NRULES_ID    NUMBER        PRIMARY KEY,
  RULE_GROUP_ID NUMBER       REFERENCES HDRULES_RULE_GROUP(RULE_GROUP_ID),
  NRULES_CODE  VARCHAR2(100) NOT NULL UNIQUE,
  NAME         VARCHAR2(200) NOT NULL,
  CSHARP_CODE  CLOB          NOT NULL,
  IS_ACTIVE    NUMBER(1)     DEFAULT 1,
  VALID_FROM   DATE          DEFAULT SYSDATE NOT NULL,
  VALID_TO     DATE,
  NOTES        VARCHAR2(1000)
);

-- ==================== INDEXES ================================
CREATE INDEX IX_HDRULES_RULE_GROUP_CODE ON HDRULES_RULE_GROUP(GROUP_CODE);
CREATE INDEX IX_HDRULES_RULE_GROUP_ACTIVE ON HDRULES_RULE_GROUP(IS_ACTIVE, VALID_FROM, VALID_TO);
CREATE INDEX IX_HDRULES_RULE_GROUP_ID ON HDRULES_RULE(RULE_GROUP_ID);
CREATE INDEX IX_HDRULES_RULE_ACTIVE ON HDRULES_RULE(IS_ACTIVE, VALID_FROM, VALID_TO);
CREATE INDEX IX_HDRULES_COND_RULE ON HDRULES_CONDITION(RULE_ID, ORDINAL);
CREATE INDEX IX_HDRULES_OUTROW_RULE ON HDRULES_RULE_OUTPUT_ROW(RULE_ID);
CREATE INDEX IX_HDRULES_OUTCELL_ROW ON HDRULES_RULE_OUTPUT_CELL(OUTPUT_ROW_ID);
CREATE INDEX IX_HDRULES_OUTCOL_GROUP ON HDRULES_OUTPUT_COL_DEF(RULE_GROUP_ID, COL_CODE);
CREATE INDEX IX_HDRULES_INPARAM_GROUP ON HDRULES_INPUT_PARAM_DEF(RULE_GROUP_ID, PARAM_CODE);

-- ==================== TRIGGERS (populate IDs) ===============
CREATE OR REPLACE TRIGGER BI_HDRULES_RULE_GROUP
BEFORE INSERT ON HDRULES_RULE_GROUP
FOR EACH ROW
BEGIN
  IF :NEW.RULE_GROUP_ID IS NULL THEN
    SELECT HDRULES_SEQ_RULE_GROUP_ID.NEXTVAL INTO :NEW.RULE_GROUP_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_RULE
BEFORE INSERT ON HDRULES_RULE
FOR EACH ROW
BEGIN
  IF :NEW.RULE_ID IS NULL THEN
    SELECT HDRULES_SEQ_RULE_ID.NEXTVAL INTO :NEW.RULE_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_INPUT_PARAM
BEFORE INSERT ON HDRULES_INPUT_PARAM_DEF
FOR EACH ROW
BEGIN
  IF :NEW.INPUT_PARAM_ID IS NULL THEN
    SELECT HDRULES_SEQ_INPUT_PARAM_ID.NEXTVAL INTO :NEW.INPUT_PARAM_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_OUTPUT_COL
BEFORE INSERT ON HDRULES_OUTPUT_COL_DEF
FOR EACH ROW
BEGIN
  IF :NEW.OUTPUT_COL_ID IS NULL THEN
    SELECT HDRULES_SEQ_OUTPUT_COL_ID.NEXTVAL INTO :NEW.OUTPUT_COL_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_OUTPUT_ATTR
BEFORE INSERT ON HDRULES_OUTPUT_COL_ATTR_DEF
FOR EACH ROW
BEGIN
  IF :NEW.OUTPUT_ATTR_ID IS NULL THEN
    SELECT HDRULES_SEQ_OUTPUT_ATTR_ID.NEXTVAL INTO :NEW.OUTPUT_ATTR_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_CONDITION
BEFORE INSERT ON HDRULES_CONDITION
FOR EACH ROW
BEGIN
  IF :NEW.CONDITION_ID IS NULL THEN
    SELECT HDRULES_SEQ_CONDITION_ID.NEXTVAL INTO :NEW.CONDITION_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_COND_SET_VAL
BEFORE INSERT ON HDRULES_COND_SET_VALUE
FOR EACH ROW
BEGIN
  IF :NEW.COND_SET_VAL_ID IS NULL THEN
    SELECT HDRULES_SEQ_COND_SET_VAL_ID.NEXTVAL INTO :NEW.COND_SET_VAL_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_OUT_ROW
BEFORE INSERT ON HDRULES_RULE_OUTPUT_ROW
FOR EACH ROW
BEGIN
  IF :NEW.OUTPUT_ROW_ID IS NULL THEN
    SELECT HDRULES_SEQ_OUTPUT_ROW_ID.NEXTVAL INTO :NEW.OUTPUT_ROW_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_OUT_CELL
BEFORE INSERT ON HDRULES_RULE_OUTPUT_CELL
FOR EACH ROW
BEGIN
  IF :NEW.OUTPUT_CELL_ID IS NULL THEN
    SELECT HDRULES_SEQ_OUTPUT_CELL_ID.NEXTVAL INTO :NEW.OUTPUT_CELL_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_API_DEF
BEFORE INSERT ON HDRULES_API_DEF
FOR EACH ROW
BEGIN
  IF :NEW.API_ID IS NULL THEN
    SELECT HDRULES_SEQ_API_ID.NEXTVAL INTO :NEW.API_ID FROM DUAL;
  END IF;
END;
/

CREATE OR REPLACE TRIGGER BI_HDRULES_NRULES_DEF
BEFORE INSERT ON HDRULES_NRULES_DEF
FOR EACH ROW
BEGIN
  IF :NEW.NRULES_ID IS NULL THEN
    SELECT HDRULES_SEQ_NRULES_ID.NEXTVAL INTO :NEW.NRULES_ID FROM DUAL;
  END IF;
END;
/

-- ==================== VIEWS (helpers) ========================
CREATE OR REPLACE VIEW HDRULES_V_ACTIVE_RULE_GROUP AS
SELECT * FROM HDRULES_RULE_GROUP
WHERE IS_ACTIVE = 1
  AND (VALID_FROM IS NULL OR VALID_FROM <= SYSDATE)
  AND (VALID_TO   IS NULL OR VALID_TO   >= SYSDATE);

CREATE OR REPLACE VIEW HDRULES_V_ACTIVE_RULE AS
SELECT * FROM HDRULES_RULE
WHERE IS_ACTIVE = 1
  AND (VALID_FROM IS NULL OR VALID_FROM <= SYSDATE)
  AND (VALID_TO   IS NULL OR VALID_TO   >= SYSDATE);
